A list can only consist of 1 type! [1,2,3] is good [True, 3, "String", 0.5] is not valid.
The order matters too. [1,2,3] /= [1,3,2] These are not the same List.
[1,2,3] can and is orginaly written as 1 : 2 : 3 [] , or 5 : (6 : (3 : []))  [1,2,3] == 1 : 2 : 3 [] == 5 : (6 : (3 : []))
String is a list of Char. [h,e,j] and String is a Type synonym for Char List.
Prebuilt Lists in haskell just have some small extra features to them, but they are not "special".
They can be written as - data List a = Empty | Add a (List a) - The 'a' is a type parameter to make sure that the we put the same type into the list and not mix it up.
'a' is often used for polymorphism. To define a type that, doesnt need to be defined to a task.
Reverse is a prelude that reverses a list. reverse :: [a] -> [a] , we dont need a defined typed, so 'a' works good.